/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.vivus.thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Entity implements org.apache.thrift.TBase<Entity, Entity._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Entity");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BOOL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("boolType", org.apache.thrift.protocol.TType.BOOL, (short)-1);
  private static final org.apache.thrift.protocol.TField BYTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("byteType", org.apache.thrift.protocol.TType.BYTE, (short)-2);
  private static final org.apache.thrift.protocol.TField I16_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("i16Type", org.apache.thrift.protocol.TType.I16, (short)-3);
  private static final org.apache.thrift.protocol.TField I32_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("i32Type", org.apache.thrift.protocol.TType.I32, (short)-4);
  private static final org.apache.thrift.protocol.TField I64_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("i64Type", org.apache.thrift.protocol.TType.I64, (short)-5);
  private static final org.apache.thrift.protocol.TField DOUBLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleType", org.apache.thrift.protocol.TType.DOUBLE, (short)-6);
  private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)-7);
  private static final org.apache.thrift.protocol.TField BINARY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryType", org.apache.thrift.protocol.TType.STRING, (short)-8);
  private static final org.apache.thrift.protocol.TField SLIST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("slistType", org.apache.thrift.protocol.TType.STRING, (short)-9);
  private static final org.apache.thrift.protocol.TField STR_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("strMap", org.apache.thrift.protocol.TType.MAP, (short)-10);
  private static final org.apache.thrift.protocol.TField INT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("intSet", org.apache.thrift.protocol.TType.SET, (short)-11);
  private static final org.apache.thrift.protocol.TField STR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("strList", org.apache.thrift.protocol.TType.LIST, (short)-12);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.I32, (short)-13);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)-14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EntityTupleSchemeFactory());
  }

  public String id; // required
  public String name; // optional
  public boolean boolType; // required
  public byte byteType; // required
  public short i16Type; // required
  public int i32Type; // required
  public long i64Type; // required
  public double doubleType; // required
  public String stringType; // required
  public ByteBuffer binaryType; // required
  public String slistType; // required
  public Map<String,String> strMap; // required
  public Set<Integer> intSet; // required
  public List<String> strList; // required
  /**
   * 
   * @see Result
   */
  public Result result; // required
  public String message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    BOOL_TYPE((short)-1, "boolType"),
    BYTE_TYPE((short)-2, "byteType"),
    I16_TYPE((short)-3, "i16Type"),
    I32_TYPE((short)-4, "i32Type"),
    I64_TYPE((short)-5, "i64Type"),
    DOUBLE_TYPE((short)-6, "doubleType"),
    STRING_TYPE((short)-7, "stringType"),
    BINARY_TYPE((short)-8, "binaryType"),
    SLIST_TYPE((short)-9, "slistType"),
    STR_MAP((short)-10, "strMap"),
    INT_SET((short)-11, "intSet"),
    STR_LIST((short)-12, "strList"),
    /**
     * 
     * @see Result
     */
    RESULT((short)-13, "result"),
    MESSAGE((short)-14, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case -1: // BOOL_TYPE
          return BOOL_TYPE;
        case -2: // BYTE_TYPE
          return BYTE_TYPE;
        case -3: // I16_TYPE
          return I16_TYPE;
        case -4: // I32_TYPE
          return I32_TYPE;
        case -5: // I64_TYPE
          return I64_TYPE;
        case -6: // DOUBLE_TYPE
          return DOUBLE_TYPE;
        case -7: // STRING_TYPE
          return STRING_TYPE;
        case -8: // BINARY_TYPE
          return BINARY_TYPE;
        case -9: // SLIST_TYPE
          return SLIST_TYPE;
        case -10: // STR_MAP
          return STR_MAP;
        case -11: // INT_SET
          return INT_SET;
        case -12: // STR_LIST
          return STR_LIST;
        case -13: // RESULT
          return RESULT;
        case -14: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLTYPE_ISSET_ID = 0;
  private static final int __BYTETYPE_ISSET_ID = 1;
  private static final int __I16TYPE_ISSET_ID = 2;
  private static final int __I32TYPE_ISSET_ID = 3;
  private static final int __I64TYPE_ISSET_ID = 4;
  private static final int __DOUBLETYPE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("boolType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("byteType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.I16_TYPE, new org.apache.thrift.meta_data.FieldMetaData("i16Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I32_TYPE, new org.apache.thrift.meta_data.FieldMetaData("i32Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64_TYPE, new org.apache.thrift.meta_data.FieldMetaData("i64Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("doubleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("binaryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SLIST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("slistType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR_MAP, new org.apache.thrift.meta_data.FieldMetaData("strMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INT_SET, new org.apache.thrift.meta_data.FieldMetaData("intSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STR_LIST, new org.apache.thrift.meta_data.FieldMetaData("strList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Message")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Entity.class, metaDataMap);
  }

  public Entity() {
    this.boolType = true;

  }

  public Entity(
    String id,
    boolean boolType,
    byte byteType,
    short i16Type,
    int i32Type,
    long i64Type,
    double doubleType,
    String stringType,
    ByteBuffer binaryType,
    String slistType,
    Map<String,String> strMap,
    Set<Integer> intSet,
    List<String> strList,
    Result result,
    String message)
  {
    this();
    this.id = id;
    this.boolType = boolType;
    setBoolTypeIsSet(true);
    this.byteType = byteType;
    setByteTypeIsSet(true);
    this.i16Type = i16Type;
    setI16TypeIsSet(true);
    this.i32Type = i32Type;
    setI32TypeIsSet(true);
    this.i64Type = i64Type;
    setI64TypeIsSet(true);
    this.doubleType = doubleType;
    setDoubleTypeIsSet(true);
    this.stringType = stringType;
    this.binaryType = binaryType;
    this.slistType = slistType;
    this.strMap = strMap;
    this.intSet = intSet;
    this.strList = strList;
    this.result = result;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Entity(Entity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.boolType = other.boolType;
    this.byteType = other.byteType;
    this.i16Type = other.i16Type;
    this.i32Type = other.i32Type;
    this.i64Type = other.i64Type;
    this.doubleType = other.doubleType;
    if (other.isSetStringType()) {
      this.stringType = other.stringType;
    }
    if (other.isSetBinaryType()) {
      this.binaryType = org.apache.thrift.TBaseHelper.copyBinary(other.binaryType);
;
    }
    if (other.isSetSlistType()) {
      this.slistType = other.slistType;
    }
    if (other.isSetStrMap()) {
      Map<String,String> __this__strMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.strMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__strMap_copy_key = other_element_key;

        String __this__strMap_copy_value = other_element_value;

        __this__strMap.put(__this__strMap_copy_key, __this__strMap_copy_value);
      }
      this.strMap = __this__strMap;
    }
    if (other.isSetIntSet()) {
      Set<Integer> __this__intSet = new HashSet<Integer>();
      for (Integer other_element : other.intSet) {
        __this__intSet.add(other_element);
      }
      this.intSet = __this__intSet;
    }
    if (other.isSetStrList()) {
      List<String> __this__strList = new ArrayList<String>();
      for (String other_element : other.strList) {
        __this__strList.add(other_element);
      }
      this.strList = __this__strList;
    }
    if (other.isSetResult()) {
      this.result = other.result;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public Entity deepCopy() {
    return new Entity(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.boolType = true;

    setByteTypeIsSet(false);
    this.byteType = 0;
    setI16TypeIsSet(false);
    this.i16Type = 0;
    setI32TypeIsSet(false);
    this.i32Type = 0;
    setI64TypeIsSet(false);
    this.i64Type = 0;
    setDoubleTypeIsSet(false);
    this.doubleType = 0.0;
    this.stringType = null;
    this.binaryType = null;
    this.slistType = null;
    this.strMap = null;
    this.intSet = null;
    this.strList = null;
    this.result = null;
    this.message = null;
  }

  public String getId() {
    return this.id;
  }

  public Entity setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Entity setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isBoolType() {
    return this.boolType;
  }

  public Entity setBoolType(boolean boolType) {
    this.boolType = boolType;
    setBoolTypeIsSet(true);
    return this;
  }

  public void unsetBoolType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLTYPE_ISSET_ID);
  }

  /** Returns true if field boolType is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolType() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLTYPE_ISSET_ID);
  }

  public void setBoolTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLTYPE_ISSET_ID, value);
  }

  public byte getByteType() {
    return this.byteType;
  }

  public Entity setByteType(byte byteType) {
    this.byteType = byteType;
    setByteTypeIsSet(true);
    return this;
  }

  public void unsetByteType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTETYPE_ISSET_ID);
  }

  /** Returns true if field byteType is set (has been assigned a value) and false otherwise */
  public boolean isSetByteType() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTETYPE_ISSET_ID);
  }

  public void setByteTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTETYPE_ISSET_ID, value);
  }

  public short getI16Type() {
    return this.i16Type;
  }

  public Entity setI16Type(short i16Type) {
    this.i16Type = i16Type;
    setI16TypeIsSet(true);
    return this;
  }

  public void unsetI16Type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I16TYPE_ISSET_ID);
  }

  /** Returns true if field i16Type is set (has been assigned a value) and false otherwise */
  public boolean isSetI16Type() {
    return EncodingUtils.testBit(__isset_bitfield, __I16TYPE_ISSET_ID);
  }

  public void setI16TypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I16TYPE_ISSET_ID, value);
  }

  public int getI32Type() {
    return this.i32Type;
  }

  public Entity setI32Type(int i32Type) {
    this.i32Type = i32Type;
    setI32TypeIsSet(true);
    return this;
  }

  public void unsetI32Type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I32TYPE_ISSET_ID);
  }

  /** Returns true if field i32Type is set (has been assigned a value) and false otherwise */
  public boolean isSetI32Type() {
    return EncodingUtils.testBit(__isset_bitfield, __I32TYPE_ISSET_ID);
  }

  public void setI32TypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I32TYPE_ISSET_ID, value);
  }

  public long getI64Type() {
    return this.i64Type;
  }

  public Entity setI64Type(long i64Type) {
    this.i64Type = i64Type;
    setI64TypeIsSet(true);
    return this;
  }

  public void unsetI64Type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I64TYPE_ISSET_ID);
  }

  /** Returns true if field i64Type is set (has been assigned a value) and false otherwise */
  public boolean isSetI64Type() {
    return EncodingUtils.testBit(__isset_bitfield, __I64TYPE_ISSET_ID);
  }

  public void setI64TypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I64TYPE_ISSET_ID, value);
  }

  public double getDoubleType() {
    return this.doubleType;
  }

  public Entity setDoubleType(double doubleType) {
    this.doubleType = doubleType;
    setDoubleTypeIsSet(true);
    return this;
  }

  public void unsetDoubleType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLETYPE_ISSET_ID);
  }

  /** Returns true if field doubleType is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleType() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLETYPE_ISSET_ID);
  }

  public void setDoubleTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLETYPE_ISSET_ID, value);
  }

  public String getStringType() {
    return this.stringType;
  }

  public Entity setStringType(String stringType) {
    this.stringType = stringType;
    return this;
  }

  public void unsetStringType() {
    this.stringType = null;
  }

  /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
  public boolean isSetStringType() {
    return this.stringType != null;
  }

  public void setStringTypeIsSet(boolean value) {
    if (!value) {
      this.stringType = null;
    }
  }

  public byte[] getBinaryType() {
    setBinaryType(org.apache.thrift.TBaseHelper.rightSize(binaryType));
    return binaryType == null ? null : binaryType.array();
  }

  public ByteBuffer bufferForBinaryType() {
    return binaryType;
  }

  public Entity setBinaryType(byte[] binaryType) {
    setBinaryType(binaryType == null ? (ByteBuffer)null : ByteBuffer.wrap(binaryType));
    return this;
  }

  public Entity setBinaryType(ByteBuffer binaryType) {
    this.binaryType = binaryType;
    return this;
  }

  public void unsetBinaryType() {
    this.binaryType = null;
  }

  /** Returns true if field binaryType is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryType() {
    return this.binaryType != null;
  }

  public void setBinaryTypeIsSet(boolean value) {
    if (!value) {
      this.binaryType = null;
    }
  }

  public String getSlistType() {
    return this.slistType;
  }

  public Entity setSlistType(String slistType) {
    this.slistType = slistType;
    return this;
  }

  public void unsetSlistType() {
    this.slistType = null;
  }

  /** Returns true if field slistType is set (has been assigned a value) and false otherwise */
  public boolean isSetSlistType() {
    return this.slistType != null;
  }

  public void setSlistTypeIsSet(boolean value) {
    if (!value) {
      this.slistType = null;
    }
  }

  public int getStrMapSize() {
    return (this.strMap == null) ? 0 : this.strMap.size();
  }

  public void putToStrMap(String key, String val) {
    if (this.strMap == null) {
      this.strMap = new HashMap<String,String>();
    }
    this.strMap.put(key, val);
  }

  public Map<String,String> getStrMap() {
    return this.strMap;
  }

  public Entity setStrMap(Map<String,String> strMap) {
    this.strMap = strMap;
    return this;
  }

  public void unsetStrMap() {
    this.strMap = null;
  }

  /** Returns true if field strMap is set (has been assigned a value) and false otherwise */
  public boolean isSetStrMap() {
    return this.strMap != null;
  }

  public void setStrMapIsSet(boolean value) {
    if (!value) {
      this.strMap = null;
    }
  }

  public int getIntSetSize() {
    return (this.intSet == null) ? 0 : this.intSet.size();
  }

  public java.util.Iterator<Integer> getIntSetIterator() {
    return (this.intSet == null) ? null : this.intSet.iterator();
  }

  public void addToIntSet(int elem) {
    if (this.intSet == null) {
      this.intSet = new HashSet<Integer>();
    }
    this.intSet.add(elem);
  }

  public Set<Integer> getIntSet() {
    return this.intSet;
  }

  public Entity setIntSet(Set<Integer> intSet) {
    this.intSet = intSet;
    return this;
  }

  public void unsetIntSet() {
    this.intSet = null;
  }

  /** Returns true if field intSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIntSet() {
    return this.intSet != null;
  }

  public void setIntSetIsSet(boolean value) {
    if (!value) {
      this.intSet = null;
    }
  }

  public int getStrListSize() {
    return (this.strList == null) ? 0 : this.strList.size();
  }

  public java.util.Iterator<String> getStrListIterator() {
    return (this.strList == null) ? null : this.strList.iterator();
  }

  public void addToStrList(String elem) {
    if (this.strList == null) {
      this.strList = new ArrayList<String>();
    }
    this.strList.add(elem);
  }

  public List<String> getStrList() {
    return this.strList;
  }

  public Entity setStrList(List<String> strList) {
    this.strList = strList;
    return this;
  }

  public void unsetStrList() {
    this.strList = null;
  }

  /** Returns true if field strList is set (has been assigned a value) and false otherwise */
  public boolean isSetStrList() {
    return this.strList != null;
  }

  public void setStrListIsSet(boolean value) {
    if (!value) {
      this.strList = null;
    }
  }

  /**
   * 
   * @see Result
   */
  public Result getResult() {
    return this.result;
  }

  /**
   * 
   * @see Result
   */
  public Entity setResult(Result result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public Entity setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case BOOL_TYPE:
      if (value == null) {
        unsetBoolType();
      } else {
        setBoolType((Boolean)value);
      }
      break;

    case BYTE_TYPE:
      if (value == null) {
        unsetByteType();
      } else {
        setByteType((Byte)value);
      }
      break;

    case I16_TYPE:
      if (value == null) {
        unsetI16Type();
      } else {
        setI16Type((Short)value);
      }
      break;

    case I32_TYPE:
      if (value == null) {
        unsetI32Type();
      } else {
        setI32Type((Integer)value);
      }
      break;

    case I64_TYPE:
      if (value == null) {
        unsetI64Type();
      } else {
        setI64Type((Long)value);
      }
      break;

    case DOUBLE_TYPE:
      if (value == null) {
        unsetDoubleType();
      } else {
        setDoubleType((Double)value);
      }
      break;

    case STRING_TYPE:
      if (value == null) {
        unsetStringType();
      } else {
        setStringType((String)value);
      }
      break;

    case BINARY_TYPE:
      if (value == null) {
        unsetBinaryType();
      } else {
        setBinaryType((ByteBuffer)value);
      }
      break;

    case SLIST_TYPE:
      if (value == null) {
        unsetSlistType();
      } else {
        setSlistType((String)value);
      }
      break;

    case STR_MAP:
      if (value == null) {
        unsetStrMap();
      } else {
        setStrMap((Map<String,String>)value);
      }
      break;

    case INT_SET:
      if (value == null) {
        unsetIntSet();
      } else {
        setIntSet((Set<Integer>)value);
      }
      break;

    case STR_LIST:
      if (value == null) {
        unsetStrList();
      } else {
        setStrList((List<String>)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Result)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case BOOL_TYPE:
      return Boolean.valueOf(isBoolType());

    case BYTE_TYPE:
      return Byte.valueOf(getByteType());

    case I16_TYPE:
      return Short.valueOf(getI16Type());

    case I32_TYPE:
      return Integer.valueOf(getI32Type());

    case I64_TYPE:
      return Long.valueOf(getI64Type());

    case DOUBLE_TYPE:
      return Double.valueOf(getDoubleType());

    case STRING_TYPE:
      return getStringType();

    case BINARY_TYPE:
      return getBinaryType();

    case SLIST_TYPE:
      return getSlistType();

    case STR_MAP:
      return getStrMap();

    case INT_SET:
      return getIntSet();

    case STR_LIST:
      return getStrList();

    case RESULT:
      return getResult();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case BOOL_TYPE:
      return isSetBoolType();
    case BYTE_TYPE:
      return isSetByteType();
    case I16_TYPE:
      return isSetI16Type();
    case I32_TYPE:
      return isSetI32Type();
    case I64_TYPE:
      return isSetI64Type();
    case DOUBLE_TYPE:
      return isSetDoubleType();
    case STRING_TYPE:
      return isSetStringType();
    case BINARY_TYPE:
      return isSetBinaryType();
    case SLIST_TYPE:
      return isSetSlistType();
    case STR_MAP:
      return isSetStrMap();
    case INT_SET:
      return isSetIntSet();
    case STR_LIST:
      return isSetStrList();
    case RESULT:
      return isSetResult();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Entity)
      return this.equals((Entity)that);
    return false;
  }

  public boolean equals(Entity that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_boolType = true;
    boolean that_present_boolType = true;
    if (this_present_boolType || that_present_boolType) {
      if (!(this_present_boolType && that_present_boolType))
        return false;
      if (this.boolType != that.boolType)
        return false;
    }

    boolean this_present_byteType = true;
    boolean that_present_byteType = true;
    if (this_present_byteType || that_present_byteType) {
      if (!(this_present_byteType && that_present_byteType))
        return false;
      if (this.byteType != that.byteType)
        return false;
    }

    boolean this_present_i16Type = true;
    boolean that_present_i16Type = true;
    if (this_present_i16Type || that_present_i16Type) {
      if (!(this_present_i16Type && that_present_i16Type))
        return false;
      if (this.i16Type != that.i16Type)
        return false;
    }

    boolean this_present_i32Type = true;
    boolean that_present_i32Type = true;
    if (this_present_i32Type || that_present_i32Type) {
      if (!(this_present_i32Type && that_present_i32Type))
        return false;
      if (this.i32Type != that.i32Type)
        return false;
    }

    boolean this_present_i64Type = true;
    boolean that_present_i64Type = true;
    if (this_present_i64Type || that_present_i64Type) {
      if (!(this_present_i64Type && that_present_i64Type))
        return false;
      if (this.i64Type != that.i64Type)
        return false;
    }

    boolean this_present_doubleType = true;
    boolean that_present_doubleType = true;
    if (this_present_doubleType || that_present_doubleType) {
      if (!(this_present_doubleType && that_present_doubleType))
        return false;
      if (this.doubleType != that.doubleType)
        return false;
    }

    boolean this_present_stringType = true && this.isSetStringType();
    boolean that_present_stringType = true && that.isSetStringType();
    if (this_present_stringType || that_present_stringType) {
      if (!(this_present_stringType && that_present_stringType))
        return false;
      if (!this.stringType.equals(that.stringType))
        return false;
    }

    boolean this_present_binaryType = true && this.isSetBinaryType();
    boolean that_present_binaryType = true && that.isSetBinaryType();
    if (this_present_binaryType || that_present_binaryType) {
      if (!(this_present_binaryType && that_present_binaryType))
        return false;
      if (!this.binaryType.equals(that.binaryType))
        return false;
    }

    boolean this_present_slistType = true && this.isSetSlistType();
    boolean that_present_slistType = true && that.isSetSlistType();
    if (this_present_slistType || that_present_slistType) {
      if (!(this_present_slistType && that_present_slistType))
        return false;
      if (!this.slistType.equals(that.slistType))
        return false;
    }

    boolean this_present_strMap = true && this.isSetStrMap();
    boolean that_present_strMap = true && that.isSetStrMap();
    if (this_present_strMap || that_present_strMap) {
      if (!(this_present_strMap && that_present_strMap))
        return false;
      if (!this.strMap.equals(that.strMap))
        return false;
    }

    boolean this_present_intSet = true && this.isSetIntSet();
    boolean that_present_intSet = true && that.isSetIntSet();
    if (this_present_intSet || that_present_intSet) {
      if (!(this_present_intSet && that_present_intSet))
        return false;
      if (!this.intSet.equals(that.intSet))
        return false;
    }

    boolean this_present_strList = true && this.isSetStrList();
    boolean that_present_strList = true && that.isSetStrList();
    if (this_present_strList || that_present_strList) {
      if (!(this_present_strList && that_present_strList))
        return false;
      if (!this.strList.equals(that.strList))
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Entity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Entity typedOther = (Entity)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolType()).compareTo(typedOther.isSetBoolType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolType, typedOther.boolType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteType()).compareTo(typedOther.isSetByteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteType, typedOther.byteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16Type()).compareTo(typedOther.isSetI16Type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16Type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16Type, typedOther.i16Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32Type()).compareTo(typedOther.isSetI32Type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32Type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32Type, typedOther.i32Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64Type()).compareTo(typedOther.isSetI64Type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64Type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64Type, typedOther.i64Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleType()).compareTo(typedOther.isSetDoubleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleType, typedOther.doubleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringType()).compareTo(typedOther.isSetStringType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, typedOther.stringType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryType()).compareTo(typedOther.isSetBinaryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryType, typedOther.binaryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlistType()).compareTo(typedOther.isSetSlistType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlistType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slistType, typedOther.slistType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrMap()).compareTo(typedOther.isSetStrMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strMap, typedOther.strMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntSet()).compareTo(typedOther.isSetIntSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intSet, typedOther.intSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrList()).compareTo(typedOther.isSetStrList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strList, typedOther.strList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, typedOther.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Entity(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("boolType:");
    sb.append(this.boolType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteType:");
    sb.append(this.byteType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16Type:");
    sb.append(this.i16Type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i32Type:");
    sb.append(this.i32Type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64Type:");
    sb.append(this.i64Type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleType:");
    sb.append(this.doubleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringType:");
    if (this.stringType == null) {
      sb.append("null");
    } else {
      sb.append(this.stringType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binaryType:");
    if (this.binaryType == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binaryType, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("slistType:");
    if (this.slistType == null) {
      sb.append("null");
    } else {
      sb.append(this.slistType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strMap:");
    if (this.strMap == null) {
      sb.append("null");
    } else {
      sb.append(this.strMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intSet:");
    if (this.intSet == null) {
      sb.append("null");
    } else {
      sb.append(this.intSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strList:");
    if (this.strList == null) {
      sb.append("null");
    } else {
      sb.append(this.strList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EntityStandardSchemeFactory implements SchemeFactory {
    public EntityStandardScheme getScheme() {
      return new EntityStandardScheme();
    }
  }

  private static class EntityStandardScheme extends StandardScheme<Entity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Entity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -1: // BOOL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolType = iprot.readBool();
              struct.setBoolTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -2: // BYTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteType = iprot.readByte();
              struct.setByteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -3: // I16_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.i16Type = iprot.readI16();
              struct.setI16TypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -4: // I32_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i32Type = iprot.readI32();
              struct.setI32TypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -5: // I64_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64Type = iprot.readI64();
              struct.setI64TypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -6: // DOUBLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleType = iprot.readDouble();
              struct.setDoubleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -7: // STRING_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringType = iprot.readString();
              struct.setStringTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -8: // BINARY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryType = iprot.readBinary();
              struct.setBinaryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -9: // SLIST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.slistType = iprot.readString();
              struct.setSlistTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -10: // STR_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.strMap = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.strMap.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setStrMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -11: // INT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set4 = iprot.readSetBegin();
                struct.intSet = new HashSet<Integer>(2*_set4.size);
                for (int _i5 = 0; _i5 < _set4.size; ++_i5)
                {
                  int _elem6; // required
                  _elem6 = iprot.readI32();
                  struct.intSet.add(_elem6);
                }
                iprot.readSetEnd();
              }
              struct.setIntSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -12: // STR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.strList = new ArrayList<String>(_list7.size);
                for (int _i8 = 0; _i8 < _list7.size; ++_i8)
                {
                  String _elem9; // required
                  _elem9 = iprot.readString();
                  struct.strList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setStrListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -13: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.result = Result.findByValue(iprot.readI32());
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -14: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Entity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        oprot.writeI32(struct.result.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.strList != null) {
        oprot.writeFieldBegin(STR_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.strList.size()));
          for (String _iter10 : struct.strList)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intSet != null) {
        oprot.writeFieldBegin(INT_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.intSet.size()));
          for (int _iter11 : struct.intSet)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.strMap != null) {
        oprot.writeFieldBegin(STR_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.strMap.size()));
          for (Map.Entry<String, String> _iter12 : struct.strMap.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.slistType != null) {
        oprot.writeFieldBegin(SLIST_TYPE_FIELD_DESC);
        oprot.writeString(struct.slistType);
        oprot.writeFieldEnd();
      }
      if (struct.binaryType != null) {
        oprot.writeFieldBegin(BINARY_TYPE_FIELD_DESC);
        oprot.writeBinary(struct.binaryType);
        oprot.writeFieldEnd();
      }
      if (struct.stringType != null) {
        oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
        oprot.writeString(struct.stringType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DOUBLE_TYPE_FIELD_DESC);
      oprot.writeDouble(struct.doubleType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I64_TYPE_FIELD_DESC);
      oprot.writeI64(struct.i64Type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I32_TYPE_FIELD_DESC);
      oprot.writeI32(struct.i32Type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I16_TYPE_FIELD_DESC);
      oprot.writeI16(struct.i16Type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.byteType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOL_TYPE_FIELD_DESC);
      oprot.writeBool(struct.boolType);
      oprot.writeFieldEnd();
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EntityTupleSchemeFactory implements SchemeFactory {
    public EntityTupleScheme getScheme() {
      return new EntityTupleScheme();
    }
  }

  private static class EntityTupleScheme extends TupleScheme<Entity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Entity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetBoolType()) {
        optionals.set(1);
      }
      if (struct.isSetByteType()) {
        optionals.set(2);
      }
      if (struct.isSetI16Type()) {
        optionals.set(3);
      }
      if (struct.isSetI32Type()) {
        optionals.set(4);
      }
      if (struct.isSetI64Type()) {
        optionals.set(5);
      }
      if (struct.isSetDoubleType()) {
        optionals.set(6);
      }
      if (struct.isSetStringType()) {
        optionals.set(7);
      }
      if (struct.isSetBinaryType()) {
        optionals.set(8);
      }
      if (struct.isSetSlistType()) {
        optionals.set(9);
      }
      if (struct.isSetStrMap()) {
        optionals.set(10);
      }
      if (struct.isSetIntSet()) {
        optionals.set(11);
      }
      if (struct.isSetStrList()) {
        optionals.set(12);
      }
      if (struct.isSetResult()) {
        optionals.set(13);
      }
      if (struct.isSetMessage()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetBoolType()) {
        oprot.writeBool(struct.boolType);
      }
      if (struct.isSetByteType()) {
        oprot.writeByte(struct.byteType);
      }
      if (struct.isSetI16Type()) {
        oprot.writeI16(struct.i16Type);
      }
      if (struct.isSetI32Type()) {
        oprot.writeI32(struct.i32Type);
      }
      if (struct.isSetI64Type()) {
        oprot.writeI64(struct.i64Type);
      }
      if (struct.isSetDoubleType()) {
        oprot.writeDouble(struct.doubleType);
      }
      if (struct.isSetStringType()) {
        oprot.writeString(struct.stringType);
      }
      if (struct.isSetBinaryType()) {
        oprot.writeBinary(struct.binaryType);
      }
      if (struct.isSetSlistType()) {
        oprot.writeString(struct.slistType);
      }
      if (struct.isSetStrMap()) {
        {
          oprot.writeI32(struct.strMap.size());
          for (Map.Entry<String, String> _iter13 : struct.strMap.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeString(_iter13.getValue());
          }
        }
      }
      if (struct.isSetIntSet()) {
        {
          oprot.writeI32(struct.intSet.size());
          for (int _iter14 : struct.intSet)
          {
            oprot.writeI32(_iter14);
          }
        }
      }
      if (struct.isSetStrList()) {
        {
          oprot.writeI32(struct.strList.size());
          for (String _iter15 : struct.strList)
          {
            oprot.writeString(_iter15);
          }
        }
      }
      if (struct.isSetResult()) {
        oprot.writeI32(struct.result.getValue());
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Entity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.boolType = iprot.readBool();
        struct.setBoolTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.byteType = iprot.readByte();
        struct.setByteTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.i16Type = iprot.readI16();
        struct.setI16TypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.i32Type = iprot.readI32();
        struct.setI32TypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.i64Type = iprot.readI64();
        struct.setI64TypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.doubleType = iprot.readDouble();
        struct.setDoubleTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stringType = iprot.readString();
        struct.setStringTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.binaryType = iprot.readBinary();
        struct.setBinaryTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.slistType = iprot.readString();
        struct.setSlistTypeIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.strMap = new HashMap<String,String>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18; // required
            String _val19; // required
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            struct.strMap.put(_key18, _val19);
          }
        }
        struct.setStrMapIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intSet = new HashSet<Integer>(2*_set20.size);
          for (int _i21 = 0; _i21 < _set20.size; ++_i21)
          {
            int _elem22; // required
            _elem22 = iprot.readI32();
            struct.intSet.add(_elem22);
          }
        }
        struct.setIntSetIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.strList = new ArrayList<String>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            String _elem25; // required
            _elem25 = iprot.readString();
            struct.strList.add(_elem25);
          }
        }
        struct.setStrListIsSet(true);
      }
      if (incoming.get(13)) {
        struct.result = Result.findByValue(iprot.readI32());
        struct.setResultIsSet(true);
      }
      if (incoming.get(14)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
    }
  }

}

